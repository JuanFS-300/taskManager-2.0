package taskManager;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class TarefaController {
    private Connection connection;
    private final static String USER = "root";
    private final static String PASS = "Jfsc2003_";
    private final static String DATABASE = "TaskManager";
    private final static String URL = "jdbc:mysql://localhost:3306/" + DATABASE;

    public TarefaController() {
        try {
            this.connection = DriverManager.getConnection(URL, USER, PASS);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void adicionarTarefa(String nome, String descricao, String categoria, String data_dia, String data_mes, String data_ano) {
        String dataSQL = "INSERT INTO datas (dia, mes, ano) VALUES (?, ?, ?)";
        String tarefaSQL = "INSERT INTO Tarefas (nome_tarefa, descricao, categoria, data_id) VALUES (?, ?, ?, ?)";
        int dataId = -1;

        try {
            connection.setAutoCommit(false);

            try (PreparedStatement dataStmt = connection.prepareStatement(dataSQL, PreparedStatement.RETURN_GENERATED_KEYS)) {
                dataStmt.setInt(1, Integer.parseInt(data_dia));
                dataStmt.setInt(2, Integer.parseInt(data_mes));
                dataStmt.setInt(3, Integer.parseInt(data_ano));
                dataStmt.executeUpdate();

                try (ResultSet generatedKeys = dataStmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        dataId = generatedKeys.getInt(1);
                    } else {
                        throw new SQLException("Falha ao obter o ID da data.");
                    }
                }
            }

            try (PreparedStatement tarefaStmt = connection.prepareStatement(tarefaSQL)) {
                tarefaStmt.setString(1, nome);
                tarefaStmt.setString(2, descricao);
                tarefaStmt.setString(3, categoria);
                tarefaStmt.setInt(4, dataId);

                int res = tarefaStmt.executeUpdate();
                if (res > 0) {
                    JOptionPane.showMessageDialog(null, "Tarefa adicionada com sucesso ao banco de dados!");
                } else {
                    JOptionPane.showMessageDialog(null, "Falha ao adicionar a tarefa.");
                }
            }

            connection.commit();

        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException rollbackEx) {
                JOptionPane.showMessageDialog(null, "Erro ao fazer rollback: " + rollbackEx.getMessage());
            }
            JOptionPane.showMessageDialog(null, "Erro ao adicionar a tarefa: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                connection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public Atividade buscarTarefa(String nome) {
        String tarefaSQL = "SELECT t.*, d.dia, d.mes, d.ano FROM Tarefas t JOIN datas d ON t.data_id = d.id WHERE t.nome_tarefa = ?";
        Atividade tarefa = null;

        try (PreparedStatement stmt = connection.prepareStatement(tarefaSQL)) {
            stmt.setString(1, nome);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                int id = rs.getInt("t.id");
                String descricao = rs.getString("descricao");
                String categoria = rs.getString("categoria");
                String data = rs.getInt("dia") + "/" + rs.getInt("mes") + "/" + rs.getInt("ano");

                tarefa = new Atividade(categoria, nome, descricao, data, id);
            } else {
                JOptionPane.showMessageDialog(null, "Tarefa n√£o encontrada.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar a tarefa: " + e.getMessage());
            e.printStackTrace();
        }

        return tarefa;
    }

    public List<Atividade> listarTarefas() {
        List<Atividade> tarefas = new ArrayList<>();
        String query = "SELECT t.*, d.dia, d.mes, d.ano FROM Tarefas t JOIN datas d ON t.data_id = d.id";

        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome_tarefa");
                String descricao = rs.getString("descricao");
                String categoria = rs.getString("categoria");
                String data = rs.getInt("dia") + "/" + rs.getInt("mes") + "/" + rs.getInt("ano");

                tarefas.add(new Atividade(categoria, nome, descricao, data, id));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar tarefas: " + e.getMessage());
            e.printStackTrace();
        }

        return tarefas;
    }

    public List<Atividade> listarTarefasOrdenadas(String criterio) {
        List<Atividade> tarefas = new ArrayList<>();
        String query = "SELECT t.*, d.dia, d.mes, d.ano FROM Tarefas t JOIN datas d ON t.data_id = d.id ORDER BY " + criterio;

        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("id");
                String nome = rs.getString("nome_tarefa");
                String descricao = rs.getString("descricao");
                String categoria = rs.getString("categoria");
                String data = rs.getInt("dia") + "/" + rs.getInt("mes") + "/" + rs.getInt("ano");

                tarefas.add(new Atividade(categoria, nome, descricao, data, id));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao listar tarefas ordenadas: " + e.getMessage());
            e.printStackTrace();
        }

        return tarefas;
    }
}
